class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        std::vector<int>::iterator it;
        int m = nums1.size();
        int n = nums2.size();
        vector<int> *A= &nums1;
        vector<int> *B= &nums2;
        if(m>n)
        {
            A= &nums2;
            B= &nums1;
            int temp = n;
            n = m;
            m = temp;
        }
        int imin = 0;
        int imax = m;
        int halflen = (m+n+1)/2;
        int i=0;
        int j=0;
        while(imin<=imax)
        {
            i = (imin+imax)/2;
            j = halflen -i;
            if(i<m and (*B)[j-1]>(*A)[i])
            {
                imin = i+1;
            }
            else if(i>0 and (*B)[j]<(*A)[i-1])
            {
                imax = i-1;
            }
            else
            {
                int maxofleft=0;
                if(j==0)
                {
                    maxofleft = (*A)[i-1];
                }
                else if(i==0)
                {
                    maxofleft = (*B)[j-1];
                }
                else
                {
                    maxofleft = max ( (*A)[i-1],(*B)[j-1]);
                }
                if((m+n)%2==1)
                {
                    return maxofleft;
                }
                else
                {
                    int minofright =0;
                    if(i == m)
                    {
                        minofright = (*B)[j];
                    }
                    else if (j ==n)
                    {
                        minofright = (*A)[i];
                    }
                    else
                    {
                        minofright = min((*A)[i], (*B)[j]);
                    }
                    return (maxofleft+minofright)/2.0;
                }
            }
        }
        return 0;
        
    }
};