class Solution {
    public int search(int[] nums, int target) {
        if (nums.length == 0)
        {
            return -1;
        }
        if (nums.length == 1)
        {
            return nums[0] == target ? 0 : -1;
        }
        int rotationIndex= rotationSearch(nums,0,nums.length-1);
        if(rotationIndex==0)
        {
            return binarySearch(nums,0,nums.length-1,target);
        }
        if(nums[0]>target)
        {
            return binarySearch(nums,rotationIndex,nums.length-1,target);
        }
        return binarySearch(nums,0,rotationIndex,target);


    }
    public int rotationSearch(int[] nums, int left,int right)
    {
        if(nums[left]<nums[right])
        {
            return 0;
        }
        while(left<=right)
        {
            int i=(left+right)/2;
            if(nums[i]>nums[i+1])
            {
                return i+1;
            }
            else
            {
                if(nums[i]>nums[0])
                {
                    left=i+1;
                }
                else
                {
                    right=i;
                }
            }
        }
        return 0;
    }
    public int binarySearch(int[] nums,int left,int right,int target)
    {
        while(left<=right)
        {
            int i=(left+right)/2;
            if(nums[i]==target)
            {
                return i;
            }
            if(nums[i]<target)
            {
                left=i+1;
            }
            if(nums[i]>target)
            {
                right=i-1;
            }
        }
        return -1;
    }
}