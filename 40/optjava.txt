class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res= new ArrayList<List<Integer>>();
        Arrays.sort(candidates);
        backTrack(res,new ArrayList<Integer>(),0,target,candidates);
        return res;
    }
    public void backTrack(List<List<Integer>> res,List<Integer> ans,int start, int target,int[] candidates)
    {
        if(target<0)
        {
            return;
        }
        if(target==0)
        {
            res.add(new ArrayList<>(ans));
            return;
        }
        for(int j=start;j<candidates.length;j++)
        {
            if(target<candidates[j])
            {
                break;
            }
            ans.add(candidates[j]);
            backTrack(res,ans,j+1,target-candidates[j],candidates);
            ans.remove(ans.size()-1);
            while(j<candidates.length-1&&candidates[j]==candidates[j+1])
            {
                j++;
            }
            
        }

    }

}