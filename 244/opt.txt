class WordDistance {
public:
    unordered_map<string, vector<int>> key;
    int maxlength;
    WordDistance(vector<string>& words) {
        maxlength=words.size();
        for(int i=0;i<words.size();i++)
        {
            if(key.find(words[i])==key.end())
            {
                vector<int> temp={i};
                key[words[i]]=temp;
            }
            else
            {
                vector<int> temp=key[words[i]];
                temp.push_back(i);
                key[words[i]]=temp;             
            }
        }

    }
    
    int shortest(string word1, string word2) {
       int ans = maxlength+3;
       vector<int> temp1= key[word1];
       vector<int> temp2= key[word2];
       int i = 0;
       int j = 0;
       while(i<temp1.size()&&j<temp2.size())
       {
           if(ans > abs(temp1[i]-temp2[j]))
           {
               ans = abs(temp1[i]-temp2[j]);
           }
           if(temp1[i]<temp2[j])
           {
               i++;
           }
           else
           {
               j++;
           }
       }
       return ans;
    }
};

/**
 * Your WordDistance object will be instantiated and called as such:
 * WordDistance* obj = new WordDistance(words);
 * int param_1 = obj->shortest(word1,word2);
 */

