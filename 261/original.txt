
class DisjointSet
{
    public:
        vector<int> parent;
        vector<int> rank;
        int count;

        DisjointSet(int n)
        {
            parent =  vector<int> (n, -1);
            rank = vector<int> (n, 0);
            count = n;
        }

        int findroot(int n)
        {
            int root = n;
            while(parent[root]!=-1)
            {
                root = parent[root];
            }
            return root;
        }
        bool unionfind(int x,int y)
        {
            int xroot = findroot(x);
            int yroot = findroot(y);
            if(xroot==yroot)
            {
                return false;
            }
            if(rank[xroot]>rank[yroot])
            {
                parent[yroot]=xroot;
                count--;
                return true;
            }
            if(rank[xroot]<rank[yroot])
            {
                parent[xroot]=yroot;
                count--;
                return true;
            }
            if(rank[xroot]==rank[yroot])
            {
                parent[yroot]=xroot;
                rank[xroot]++;
                count--;
                return true;

            }
            return false;
        }
};
class Solution {
public:
    bool validTree(int n, vector<vector<int>>& edges) {
         DisjointSet disjointSet(n);
         for(vector<int> edge:edges)
         {
             if(!disjointSet.unionfind(edge[0], edge[1]))
             {
                 return false;
             }
         }
         if(disjointSet.count==1)
         {
             return true;
         }
         return false;
    }
};