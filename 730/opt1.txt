class Solution {
public:
    
    vector<vector<int>> dp;
    int countPalindromicSubsequences(string S) {
        int len = S.length();
        vector<vector<int>> dp1(len,vector<int>(len,0));
        for(int i=0;i<len;i++)
        {
            dp1[i][i]=1;
        }
        dp=dp1;
        for(int i=len-2;i>=0;i--)
        {
            for(int j= i+1;j<len;j++)
            {
                if(S[i]==S[j])
                {
                    int left=i+1;
                    int right=j-1;
                    while(left <=right&&S[left]!=S[i])
                    {
                        left++;
                    }
                    while(left <=right&&S[right]!=S[j])
                    {
                        right--;
                    }
                    if(left>right)
                    {
                        dp[i][j]=(2*dp[i+1][j-1]+2)%1000000007;
                    }
                    if(left==right)
                    {
                        dp[i][j]=(2*dp[i+1][j-1]+1)%1000000007;
                    }
                    if(left<right)
                    {
                        dp[i][j]=(2*dp[i+1][j-1]-dp[left+1][right-1])%1000000007;
                    }

                }
                else
                {
                    dp[i][j]=(dp[i][j-1]+dp[i+1][j]-dp[i+1][j-1])%1000000007;
                }
                if(dp[i][j]<0)
                {
                    dp[i][j]=(dp[i][j]+1000000007)%1000000007;
                }
            }
        }
        return dp[0][len-1]%1000000007;

    }
};