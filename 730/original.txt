class Solution {
public:
    
    
    int countPalindromicSubsequences(string S) {
        vector<vector<vector<long>>> key(4, vector<vector<long>> (S.size(), vector<long>(S.size(),0)));
        
        for(int i=S.size()-1;i>=0;i--)
        {
            for(int j=i;j<S.size();j++)
            {
                
                if(j==i)
                {
                    key[0][i][i]=0;
                    key[1][i][j]=0;
                    key[2][i][j]=0;
                    key[3][i][j]=0;
                    key[S[i]-'a'][i][i]=1;
                }
                else
                {
                    if(S[i]!='a')
                    {
                        key[0][i][j]=key[0][i+1][j];
                    }
                    else if(S[j]!='a')
                    {
                        key[0][i][j]=key[0][i][j-1];
                    }
                    if(S[i]!='b')
                    {
                        key[1][i][j]=key[1][i+1][j];
                    }
                    else if(S[j]!='b')
                    {
                        key[1][i][j]=key[1][i][j-1];
                    }
                    if(S[i]!='c')
                    {
                        key[2][i][j]=key[2][i+1][j];
                    }
                    else if(S[j]!='c')
                    {
                        key[2][i][j]=key[2][i][j-1];
                    }
                    if(S[i]!='d')
                    {
                        key[3][i][j]=key[3][i+1][j];
                    }
                    else if(S[j]!='d')
                    {
                        key[3][i][j]=key[3][i][j-1];
                    }
                    if(S[i]==S[j])
                    {
                        if(j-i==1)
                        {
                            key[S[i]-'a'][i][j]=2;
                        }
                        else{
                            key[S[i]-'a'][i][j]=(2+key[0][i+1][j-1]+key[1][i+1][j-1]+key[2][i+1][j-1]+key[3][i+1][j-1])%(1000000007);
                        }
                    }
                }
                
            }
        }
        return (key[0][0][S.size()-1]+key[1][0][S.size()-1]+key[2][0][S.size()-1]+key[3][0][S.size()-1])%(1000000007);
        
    }
};