/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, vector<int> &sorted)
    {
        if(root!=NULL)
        {
            dfs(root->left,sorted);
            sorted.push_back(root->val);
            dfs(root->right,sorted);
        }
    }
    vector<int> closestKValues(TreeNode* root, double target, int k) {
        vector<int> sorted;
        dfs(root,sorted);
        int l = 0;
        int r = sorted.size()-k;
        int mid =0;
        while(l < r)
        {
            mid = (r+l)/2;
            if(target - sorted[mid]>sorted[mid+k]-target)
            {
                l=mid+1;
            }
            else
            {
                r=mid;
            }
    
            
        }
        vector<int>::const_iterator first = sorted.begin() + l;
        vector<int>::const_iterator last = sorted.begin() + l+k;
        vector<int> ans(first, last);
        return ans;
    }
};